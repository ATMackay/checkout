// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/ATMackay/checkout/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockDatabase) AddOrder(ctx context.Context, o *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockDatabaseMockRecorder) AddOrder(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockDatabase)(nil).AddOrder), ctx, o)
}

// GetItemByName mocks base method.
func (m *MockDatabase) GetItemByName(ctx context.Context, name string) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByName", ctx, name)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByName indicates an expected call of GetItemByName.
func (mr *MockDatabaseMockRecorder) GetItemByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByName", reflect.TypeOf((*MockDatabase)(nil).GetItemByName), ctx, name)
}

// GetItemBySKU mocks base method.
func (m *MockDatabase) GetItemBySKU(ctx context.Context, sku string) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemBySKU", ctx, sku)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemBySKU indicates an expected call of GetItemBySKU.
func (mr *MockDatabaseMockRecorder) GetItemBySKU(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemBySKU", reflect.TypeOf((*MockDatabase)(nil).GetItemBySKU), ctx, sku)
}

// GetItemsBySKU mocks base method.
func (m *MockDatabase) GetItemsBySKU(ctx context.Context, sku []string) ([]*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsBySKU", ctx, sku)
	ret0, _ := ret[0].([]*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsBySKU indicates an expected call of GetItemsBySKU.
func (mr *MockDatabaseMockRecorder) GetItemsBySKU(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsBySKU", reflect.TypeOf((*MockDatabase)(nil).GetItemsBySKU), ctx, sku)
}

// GetOrders mocks base method.
func (m *MockDatabase) GetOrders(ctx context.Context) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockDatabaseMockRecorder) GetOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockDatabase)(nil).GetOrders), ctx)
}

// Ping mocks base method.
func (m *MockDatabase) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDatabaseMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDatabase)(nil).Ping), ctx)
}

// UpsertItems mocks base method.
func (m *MockDatabase) UpsertItems(ctx context.Context, items []*model.Item) ([]*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertItems", ctx, items)
	ret0, _ := ret[0].([]*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertItems indicates an expected call of UpsertItems.
func (mr *MockDatabaseMockRecorder) UpsertItems(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertItems", reflect.TypeOf((*MockDatabase)(nil).UpsertItems), ctx, items)
}

// MockHealthChecker is a mock of HealthChecker interface.
type MockHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerMockRecorder
}

// MockHealthCheckerMockRecorder is the mock recorder for MockHealthChecker.
type MockHealthCheckerMockRecorder struct {
	mock *MockHealthChecker
}

// NewMockHealthChecker creates a new mock instance.
func NewMockHealthChecker(ctrl *gomock.Controller) *MockHealthChecker {
	mock := &MockHealthChecker{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthChecker) EXPECT() *MockHealthCheckerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockHealthChecker) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockHealthCheckerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHealthChecker)(nil).Ping), ctx)
}

// MockInventoryStore is a mock of InventoryStore interface.
type MockInventoryStore struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryStoreMockRecorder
}

// MockInventoryStoreMockRecorder is the mock recorder for MockInventoryStore.
type MockInventoryStoreMockRecorder struct {
	mock *MockInventoryStore
}

// NewMockInventoryStore creates a new mock instance.
func NewMockInventoryStore(ctrl *gomock.Controller) *MockInventoryStore {
	mock := &MockInventoryStore{ctrl: ctrl}
	mock.recorder = &MockInventoryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryStore) EXPECT() *MockInventoryStoreMockRecorder {
	return m.recorder
}

// GetItemByName mocks base method.
func (m *MockInventoryStore) GetItemByName(ctx context.Context, name string) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByName", ctx, name)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByName indicates an expected call of GetItemByName.
func (mr *MockInventoryStoreMockRecorder) GetItemByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByName", reflect.TypeOf((*MockInventoryStore)(nil).GetItemByName), ctx, name)
}

// GetItemBySKU mocks base method.
func (m *MockInventoryStore) GetItemBySKU(ctx context.Context, sku string) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemBySKU", ctx, sku)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemBySKU indicates an expected call of GetItemBySKU.
func (mr *MockInventoryStoreMockRecorder) GetItemBySKU(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemBySKU", reflect.TypeOf((*MockInventoryStore)(nil).GetItemBySKU), ctx, sku)
}

// GetItemsBySKU mocks base method.
func (m *MockInventoryStore) GetItemsBySKU(ctx context.Context, sku []string) ([]*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsBySKU", ctx, sku)
	ret0, _ := ret[0].([]*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsBySKU indicates an expected call of GetItemsBySKU.
func (mr *MockInventoryStoreMockRecorder) GetItemsBySKU(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsBySKU", reflect.TypeOf((*MockInventoryStore)(nil).GetItemsBySKU), ctx, sku)
}

// UpsertItems mocks base method.
func (m *MockInventoryStore) UpsertItems(ctx context.Context, items []*model.Item) ([]*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertItems", ctx, items)
	ret0, _ := ret[0].([]*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertItems indicates an expected call of UpsertItems.
func (mr *MockInventoryStoreMockRecorder) UpsertItems(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertItems", reflect.TypeOf((*MockInventoryStore)(nil).UpsertItems), ctx, items)
}

// MockOrderStore is a mock of OrderStore interface.
type MockOrderStore struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStoreMockRecorder
}

// MockOrderStoreMockRecorder is the mock recorder for MockOrderStore.
type MockOrderStoreMockRecorder struct {
	mock *MockOrderStore
}

// NewMockOrderStore creates a new mock instance.
func NewMockOrderStore(ctrl *gomock.Controller) *MockOrderStore {
	mock := &MockOrderStore{ctrl: ctrl}
	mock.recorder = &MockOrderStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStore) EXPECT() *MockOrderStoreMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderStore) AddOrder(ctx context.Context, o *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderStoreMockRecorder) AddOrder(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderStore)(nil).AddOrder), ctx, o)
}

// GetOrders mocks base method.
func (m *MockOrderStore) GetOrders(ctx context.Context) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderStoreMockRecorder) GetOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderStore)(nil).GetOrders), ctx)
}
